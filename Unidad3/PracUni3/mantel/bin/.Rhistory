### Dataframes
x <- data.frame(sp = c("Homo sapiens", "Homo sapiens", "Homo neanderthalensis", "Homo neanderthalensis"),
sexo = c("Male", "Female", "Male", "Female"), edad = c(60,30,10,50))
View(x)
x
x$sexo
x[["sexo"]]
x[,2]
x[1,2]
?cbind
x<-cbind(x, pop=c("Australia", "Mesoamerica", "Europa", "Africa"))
x
### Dataframes
x <- data.frame(sp = c("Homo sapiens", "Homo sapiens", "Homo neanderthalensis", "Homo neanderthalensis"),
sexo = c("Male", "Female", "Male", "Female"), edad = c(60,30,10,50))
x
x
x<-cbind(pop=c("Australia", "Mesoamerica", "Europa", "Africa"), x)
x
x<-cbind(pop=c("Australia", "Mesoamerica", "Europa", "Africa"), x, x)
x
x <- data.frame(sp = c("Homo sapiens", "Homo sapiens", "Homo neanderthalensis", "Homo neanderthalensis"),
sexo = c("Male", "Female", "Male", "Female"), edad = c(60,30,10,50), stringsAsFactors = FALSE)
x$sexo
x <- matrix(1:12, nrow=4, ncol=3)
rownames(x) <-c("A", "B", "B", "C")
x
dim(x)
nrow(x)
ncol(x)
x[,2]
x[,2]
x[1:3,]
x[1:3,2:3]
x[1:3,c(1,3)]
x[x >=5]
x >=5
rownames(x)
x["B",]
install.packages("vegan")
## Cargar librerías necesarias
library(vegan)
detach("package:vegan", unload=TRUE)
## Cargar librerías necesarias
library(vegan)
?adipart
detach("package:vegan", unload=TRUE)
?adipart
sessionInfo()
### cargar archivos de datos
?read.delim
### cargar archivos de datos
read.delim(file="maizteocintle_SNP50k_meta_extended.txt")
getwd()
setwd("/Users/ticatla/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad7/Prac_Uni7/maices/meta")
getwd()
read.delim(file="maizteocintle_SNP50k_meta_extended.txt")
maices<-read.delim(file="maizteocintle_SNP50k_meta_extended.txt")
View(maices)
### cargar archivos de datos
getwd()
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad7/Prac_Uni7/maices/bin")
### cargar archivos de datos
getwd()
getwd()
maices<-read.delim(file="maizteocintle_SNP50k_meta_extended.txt")
maices<-read.delim(file="../meta/maizteocintle_SNP50k_meta_extended.txt")
View(maices)
### cargar archivos de datos
getwd()
# start with a fresh brain
rm(list = ls())
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad7/Prac_Uni7/mantel/bin")
# Load libraries
library(ade4)
library(ggplot2)
library(sp)
########### Get data  ###############
## Source home made funcs to load data
source("read.fst_summary_fix.R")
source("read.effdist.R")
# For reference, get Population ID codes as used for Circuitscape and Map plotting
# this is not the same order than PopuplationMaps used for Stacks. Careful.
points.info<-read.delim("../spatial/surveyed_mountains.tsv")
points.info
points.infoxy<-as.matrix(points.info[,c(5,6)], longlat=TRUE)
# Get geographic distances
GeoDist<-spDists(points.infoxy, )
colnames(GeoDist)<-points.info$Key
rownames(GeoDist)<-points.info$Key
### define paths for loading data
genfolder<-(paste0("../genetic"))
genfolder
### define paths for loading data
genfolder<-"../genetic"
# Get geographic distances
GeoDist<-spDists(points.infoxy, )
colnames(GeoDist)<-points.info$Key
rownames(GeoDist)<-points.info$Key
### define paths for loading data
genfolder<-"../genetic"
circfolder<-"../spatial/resdist"
## define pop names as in Stack population maps
# check pop map order
readLines(paste0(genfolder, "/BerSS.sumstats.tsv"), n=6)
# define popNames
popNames=c("Aj","Iz","Ma","Pe","Tl","To")
## Get Fst pairwise matrix
B.Fst <-read.fst_summary_fix(file=paste0(genfolder, "/BerSS.fst_summary.tsv"),
popNames=popNames)
### Get general info and paths
## define pop names as in Circuitscape focal points order
# get focal points
focpoints<-read.delim(paste0(circfolder, "/Balpina_focalpoints.txt"), header=FALSE)
# get info of focal points
x<-points.info$ID %in% focpoints[,1]
focpoints<- points.info[x,]
# get PopNames in order of focal points
popNamesFP<-as.vector(focpoints$Key)
popNamesFP
# get PopNames in order of Stacks output PopMap
popNames=popNames
popNames
for(i in c("present", "ccsm", "miroc", "flat", "1800", "2000", "2300", "2500", "2700", "3000", "3300", "3500", "4000")) {
## define resistances.out files
resfile <- paste0(circfolder, "/Balpina_", i, "_resistances.out")
### Get effective distances
eff.dist<-read.effdist(file=resfile, popNames=popNamesFP, des.order=popNames)
### Estimate mean effective distance by population
mean.effD <- apply(eff.dist, 2, mean)
### Name output data
assign(paste0("B.", i), eff.dist)  # effective distance mat
assign(paste0("B.mean.", i), mean.effD) # mean effective distances
}
### Get Geographic distances for this spp localities
B.GeoDist<-GeoDist[match(popNames,rownames(GeoDist)), match(popNames,colnames(GeoDist))] #get right order
B.GeoDist
##### Perform Mantel test between the Fst matrix and the present and LGM effective distances
# function for lm and plotting
source("DistPlot.R")
### Berberis
# Linearize as suggested by Rousset (1997) for IBD using FST/(1 ??? FST)
B.FstLin<- B.Fst/(1-B.Fst)
# run mantel test for each condition
IBRresults<-c("rster", "MTpvalue", "MTr")
for(i in c("present", "ccsm", "miroc", "flat", "1800", "2000", "2300", "2500", "2700", "3000", "3300", "3500", "4000")) {
print(paste("Results for", i))
# Mantel test
print("Mantel test")
x<-mantel.rtest(as.dist(get(paste0("B.",i))), as.dist(B.FstLin), nrepet=10000)
print(x)
# Plot
DistPlot(get(paste0("B.",i)), B.FstLin, plotnames=FALSE,
ylabel=expression("F"[ST]*"/(1 ??? "[FST]*")"), xlabel=paste("Effective distance", i))
# get info for df
MTpvalue<-round(x$pvalue, 6)
MTr<-round(x$obs, 4)
# put results in dataframe
rster<-paste(i)
IBRresults<-rbind(IBRresults, c(rster, MTpvalue, MTr))
}
IBRresults
options(digits = 16)
3*(4/3-1)
options(digits = 7)
3*(4/3-1)
3*(4/3-1)-1
install.packages("rmarkdown")
