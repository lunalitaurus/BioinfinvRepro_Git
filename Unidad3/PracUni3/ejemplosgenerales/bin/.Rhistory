coord_flip()
# plot
ggplot(ss, aes(type)) + geom_bar(color="blue") +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
coord_flip()
# plot
ggplot(ss, aes(type)) + geom_bar(fill="blue") +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
coord_flip()
# plot
ggplot(ss, aes(type)) + geom_bar(fill=71) +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
coord_flip()
# plot
ggplot(ss, aes(type)) + geom_bar(fill=71) +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="turquoise")) +
coord_flip()
# plot
ggplot(ss, aes(type)) + geom_bar(fill="turquoise") +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
coord_flip()
# plot
ggplot(ss, aes(type)) + geom_bar(fill="turquoise3") +
theme_bw() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
coord_flip()
# plot
ggplot(ss, aes(type)) + geom_bar(fill="turquoise3") +
theme_bw() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16,face="bold")) +
coord_flip()
# plot
ggplot(ss, aes(type)) + geom_bar(fill="turquoise3") +
theme_bw() +
theme(axis.text=element_text(size=15),
axis.title=element_text(size=16,face="bold")) +
coord_flip()
wordcloud(ss$study.system, min.freq = 1, colors="grey33")
wordcloud(ss$study.system, min.freq = 1, colors="grey33")
# plot
ggplot(ss, aes(type)) + geom_bar(fill="turquoise4") +
theme_bw() +
theme(axis.text=element_text(size=15),
axis.title=element_text(size=16,face="bold")) +
coord_flip()
# plot
ggplot(ss, aes(type)) + geom_bar(fill="cyan3") +
theme_bw() +
theme(axis.text=element_text(size=15),
axis.title=element_text(size=16,face="bold")) +
coord_flip()
plot(cars)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
plot(cars)
# Sumar 1+1
1+1
# Crear un objeto con el resultado de sumar 1+1
x<-1+1
# Mostrar el valor de x
x
# sumarle 13 a x
x+13
plot(x)
y= 5
y<-5
plot(x,y)
1+1
# suma simple
1+1
# suma simple
1+1
# suma simple
1+1
# crear un objeto con el resultado de una suma
x<-1+1
# Ver el valor de x
x
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
?c
mi.vector<-c(1,2,3,4,NA)
length(mi.vector)
y<-c(mi.vector, 20,23,80:85)
y
y
y<-c(mi.vector, 20,23,80:130)
y
# buscar el elemento 16 de y
y[16]
x<-c(1:15)
x
names(x)
letters
# darle nombres de letras
names(x)<-letters[1:15]
# darle nombres de letras
names(x)<-letters[1:15]
names(x)
# dame el elemento "a"
x["a"]
### ojo nombres no únicos
x<-1:3
names(x)<-c("A", "A", "B")
x
x["A"]
1<5
1>5
# 10 es distinto de cero?
10 != 0
x<-1+1
## Ejercicio:
# crear un vector llamado x con los números del 1 al 20
x<-c(1:20)
x<-1:20
x<-100,1:20
## Ejercicio:
# crear un vector llamado x con los números del 1 al 20
x<-c(1:20)
x
# cuáles elementos de x son mayores a 15?
x > 15
# darme el elemento 5
x[5]
# Dame los elementos mayores a 15
x[x>15]
# Dame los elementos mayores a 15
x[ x > 15]
# Dame los elementos mayores a 15
x [x > 15]
# Dame los elementos mayores a 15
x[x>15]
# cuáles elementos de x son mayores a 15?
x > 15
# truco: TRUE=1 y FALSE=0
sum(1,2,3)
# truco: TRUE=1 y FALSE=0
sum(x)
x
# truco: TRUE=1 y FALSE=0
sum(x>15)
?mean
?log
log10(20)
log10(20) <
?sqrt
log10(20) <
?sqrt
log10(20) <
?sqrt
log10(20) <
sqrt(4)
log10(20) <
sqrt(4)
sqrt(4)
sqrt(4)
log10(20) < sqrt(4)
log10(20)
sqrt(4)
log(20, base = 10)
log(20, base = 10)
log(20, 10)
log(base=10, x=20)
x<- "tangana nica"
length(x)
x
# un ejemplo con varios elementos
x<-c("tangana nica", "tangana na", "2")
x
length(x)
# selecccionar o buscar por contenido del elemento
x[x=="tangana nica"]
1>5
1!=5
# ejemplo no fufu para buscar "que contenga tangana"
x[x=="tangana"]
# buscar ayuda de grep
?grep
# un ejemplo con varios elementos
MeGusta<-c("tangana nica", "tangana na", "2")
length(MeGusta)
length(MeGusta)
# selecccionar o buscar por contenido del elemento
MeGusta[MeGusta=="tangana nica"]
# ejemplo no fufu para buscar "que contenga tangana"
MeGusta[MeGusta=="tangana"]
# ejemplo sí fufuo para buscar que contenga tangana
grep(pattern = "tangana", x = MeGusta)
# imprimir MeGusta
MeGusta
# el elmento 2
MeGusta[2]
# ejemplo sí fufuo para buscar que contenga tangana
grep(pattern = "tangana", x = MeGusta)
# ejemplo sí fufuo para buscar que contenga tangana
x[grep(pattern = "tangana", x = MeGusta)]
x[c(1,2)]
# ejemplo sí fufuo para buscar que contenga tangana
#1) hacer el grep
grep(pattern = "tangana", x = MeGusta)
# ejemplo sí fufuo para buscar que contenga tangana
#1) hacer el grep
indicesdondeencontroTangana<-grep(pattern = "tangana", x = MeGusta)
indicesdondeencontroTangana
#2 ponerlo entre []
x[indicesdondeencontroTangana]
indicesdondeencontroTangana
MeGusta[grep(pattern = "tangana", x = MeGusta)]
species <-c("Hordeum sp", "Oriza sp", "Aegilops sp")
spec<-c("Coleonyx variegatus", "Coleonyx brevis", "Coleonyx elegans")
species_names <- c("S.cerevisiae","E.coli","S.pombe")
Mazama.spp <- c("americana","pandora","rufina")
especies <-c("Macaroni", "Royal", "Rockhopper")
genero<-c("female", "male")
genero
as.factor(genero)
genero<-as.factor(genero)
genero
# ejemplito
x<-c(1,2,3,3,3,2,2,1,1,2,1,2)
x
as.factor(x)
y<-as.factor(x)
y
meses <- c("March","April","January","November","January",
"September","October","September","November","August",
"January","November","November","February","May","August",
"July","December","August","August","September","November",
"February","April")
meses<-as.factor(meses)
# ¿cuáles son los levels de meses?
levels(meses)
# tabla resumen de apariciones por level
table(meses)
# cambiar un level
meses
levels(meses)
levels(meses)[1]
levels(meses)
levels(meses)[1]
levels(meses)[1]<-"Abril"
meses
x<- 1
x<- 1:3
x<- 1
class(x)
## qué clase de objeto es me gusta?
class(MeGusta)
class(x)
x<-1:3
class(x)
# especificar que queremos integer
x<- 1L
class(x)
x<- c(1:5)
class(x)
x<-as.numeric(x)
class(x)
meta_teo_filtered$POBL
getwd()
getwd()
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad3/PracUni3/mantel/bin")
getwd()
# start with a fresh brain
rm(list = ls())
# Load libraries
library(ade4)
library(ggplot2)
library(sp)
# For reference, get Population ID codes as used for Circuitscape and Map plotting
# this is not the same order than PopuplationMaps used for Stacks. Careful.
points.info<-read.delim("../spatial/surveyed_mountains.tsv")
points.info
points.infoxy<-as.matrix(points.info[,c(5,6)], longlat=TRUE)
# Get geographic distances
GeoDist<-spDists(points.infoxy, )
colnames(GeoDist)<-points.info$Key
rownames(GeoDist)<-points.info$Key
### define paths for loading data
genfolder<-"../genetic"
circfolder<-"../spatial/resdist"
## define pop names as in Stack population maps
# check pop map order
readLines(paste0(genfolder, "/BerSS.sumstats.tsv"), n=6)
# define popNames
popNames=c("Aj","Iz","Ma","Pe","Tl","To")
## Get Fst pairwise matrix
B.Fst <-read.fst_summary_fix(file=paste0(genfolder, "/BerSS.fst_summary.tsv"),
popNames=popNames)
########### Get data  ###############
## Source home made funcs to load data
source("read.fst_summary_fix.R")
read.fst_summary_fix <- function(file, popNames){
### Function to read the Stacks populations output file batch_1.fst_summary.tsv and add PopNames to it
# it also adds a 0 diagonal and converts it to a symmetric matrix
# file = path to batch_1.fst_summary.tsv file
# popNames = vector with population names in the same order than PopID in the file
### Get data
Fstmat<-data.matrix(read.delim(file = file, row.names=1, fill=TRUE))
# add col names
colnames(Fstmat)<- popNames
Fstmat
## Fix
x<-Fstmat
# add an extrarow
x <- rbind(x, n=NA)
# Change rownames to col names
rownames(x)<-colnames(x)
# add 0 diagonal
x[is.na(x)] <- 0
# make symmetrical matrix
x <- x + t(x)
Fstmat <-x
Fstmat
}
########### Get data  ###############
## Source home made funcs to load data
source("read.fst_summary_fix.R")
source("1.IBR_testing.r")
# start with a fresh brain
rm(list = ls())
setwd("~/hubiC/Science/Teaching/Mx/BioinfInvgRepro/BioinfinvRepro/Unidad3/PracUni3/ejemplosgenerales/bin")
give_i_line<- function(file, i){
## Arguments
# file = path to desired file with the indicadores, must be tab delimited and do NOT have a header
# i = number of line of file we want to print
## Function
# read indicadores list
indicador<-read.delim(file, header=FALSE, quote="", stringsAsFactors=FALSE)
# give text of the i line of the file
x<-indicador[i,1]
return(x)
}
give_i_line(file="../data/indicadores.txt", i=2)
give_i_line(file="../data/indicadores.txt", i=3)
give_i_line<- function(file, i){
## Arguments
# file = path to desired file with the indicadores, must be tab delimited and do NOT have a header
# i = number of line of file we want to print
## Function
# read indicadores list
indicador<-read.delim(file, header=FALSE, quote="", stringsAsFactors=FALSE)
# give text of the i line of the file
x<-indicador[i,1]
x
}
give_i_line(file="../data/indicadores.txt", i=3)
give_i_line<- function(file, i){
## Arguments
# file = path to desired file with the indicadores, must be tab delimited and do NOT have a header
# i = number of line of file we want to print
## Function
# read indicadores list
indicador<-read.delim(file, header=FALSE, quote="", stringsAsFactors=FALSE)
# give text of the i line of the file
x<-indicador[i,1]
}
give_i_line(file="../data/indicadores.txt", i=3)
give_i_line<- function(file, i){
## Arguments
# file = path to desired file with the indicadores, must be tab delimited and do NOT have a header
# i = number of line of file we want to print
## Function
# read indicadores list
indicador<-read.delim(file, header=FALSE, quote="", stringsAsFactors=FALSE)
# give text of the i line of the file
x<-indicador[i,1]
x
}
give_i_line(file="../data/indicadores.txt", i=3)
source("give_i_line.r")
give_i_line("../data/indicadores.txt"), i=2)
give_i_line("../data/indicadores.txt", i=2)
theta_fun <- function(Ne, u){
x <- 4*Ne*u
return(x)
}
theta_fun(Ne=120, u=1.23)
calc_thet()
calc_thet<-function(){
print("Este programa calcula el valor de Theta")
print("Ingresa el tamaño efectivo:")
ne<-scan(n=1)
print("Ingresa el valor de Mu")
mu<-scan(n=1)
Theta=4nemu
print(paste("El valor de Theta es: ", Theta))
}
calc_thet<-function(){
print("Este programa calcula el valor de Theta")
print("Ingresa el tamaño efectivo:")
ne<-scan(n=1)
print("Ingresa el valor de Mu")
mu<-scan(n=1)
Theta=4nemu
print(paste("El valor de Theta es: ", Theta))
}
library(dplyr)
?filter
iris
x<-iris
View(x)
dplyr::filter(x, Sepal.Width > 3)
# filtrar
y<-dplyr::filter(x, Sepal.Width > 3)
View(y)
z<-select(y, Species)
View(z)
# filtrar
y<-dplyr::filter(x, Sepal.Width > 3) %>%
# filtrar
y<-dplyr::filter(x, Sepal.Width > 3) %>%
select(., Species)
View(y)
# filtrar
y<-dplyr::filter(x, Sepal.Width > 3) %>%
dplyr::filter(., Petal.Length > 1.6) %>%
select(., Species)
# filtrar
y<-dplyr::filter(x, Sepal.Width > 3) %>%
dplyr::filter(., Petal.Length > 1.6)
# filtrar
y<-dplyr::filter(x, iris$Sepal.Width > 3) %>%
dplyr::filter(., Petal.Length > 1.6)
library(tidyr)
pew <- read.delim(file = "http://stat405.had.co.nz/data/pew.txt",
header = TRUE, stringsAsFactors = FALSE, check.names = F)
pew
View(pew)
?gather
# clean
pew_tidy <-gather(data = pew, ingreso, frecuencia, -religion)
View(pew_tidy)
getwd()
tb <- read.csv("../data/tb.csv")
View(tb)
View(pew)
tb_long<-gather(tb, key=demo, value=n, 4:23)
View(tb_long)
tb_long<-gather(tb, key=demo, value=n, -iso2, -year, -id)
View(tb_long)
tb_long<-gather(tb, key=demo, value=n, 4:23, na.rm = TRUE)
# o
tb_long<-gather(tb, key=demo, value=n, -iso2, -year, -id, na.rm =TRUE)
?separate
tb_tidy<- separate(tb_long, col=demo,
into=c("sex", "age"),
sep=8)
View(tb_tidy)
table(tb_tidy$sex)
clima <- read.delim("PracUni3/ejemplosgenerales/data/clima.txt",
stringsAsFactors=FALSE)
getwd()
clima <- read.delim("../data/clima.txt",
stringsAsFactors=FALSE)
View(clima)
clima_long <- gather(clima, day, value, d1:d31, na.rm = TRUE)
View(clima_long)
clima_vars <- mutate(clima_long, day = parse_number(day),
value = value / 10)
?parse_number
library(readr)
?parse_number
clima_vars <- mutate(clima_long, day = parse_number(day),
value = value / 10)
View(clima_vars)
?mutate
?spread
# spread
clima_tidy <-spread(clima_vars, key=element, value=value)
View(clima_tidy)
clima <- read.delim("../data/clima.txt",
stringsAsFactors=FALSE)
climaTidy<-gather(data=clima, key=dia, value=value, d1:d31,
na.rm=TRUE) %>%
mutate(., dia = parse_number(dia),value=value/10) %>%
spread(., key=element, value= value)
View(climaTidy)
read.csv("../data/flights.csv")
flights<-read.csv("../data/flights.csv")
head(flights)
##### leer datos
library(dplyr)
## filter
# data
df_ej <- data.frame(genero= c("mujer", "hombre", "mujer", "mujer", "hombre"),
estatura = c(1.65, 1.80, 1.70, 1.60, 1.67))
df_ej
dplyr::filter(df_ej, genero == "mujer")
dplyr::filter(df_ej, estatura > 1.65 & estatura < 1.75)
clima2 <- read.delim("https://raw.githubusercontent.com/AliciaMstt/BioinfinvRepro/master/Unidad3/PracUni3/ejemplosgenerales/data/clima.txt",
stringsAsFactors=FALSE)
View(clima2)
